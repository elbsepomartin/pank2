openapi: 3.0.2
info:
  title: pank2
  version: 1.0.0
  description: Bank API
  contact:
    name: 'Sepo-Martin Elb, Eleri Viks'
servers:
  -
    url: 'http://localhost:3000'
    description: ''
paths:
  /users:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/postUsersRequest'
        required: true
      tags:
        - users
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/postUsersResponse'
          description: User successfully registered
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
              examples:
                passwordRequired:
                  value:
                    error: 'Users validation failed: password: Path `password` is required.'
                usernameRequired:
                  value:
                    error: 'Users validation failed: username: Path `username` is required.'
                nameRequired:
                  value:
                    error: 'Users validation failed: name: Path `name` is required.'
                duplicateUsername:
                  value:
                    error: >-
                      E11000 duplicate key error collection: database.users index:
                      username_1 dup key: { username: "aaa" }
          description: Returns the errors specified
      summary: Registers a new user
  /users/account:
    get:
      tags:
        - users
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getUsersAccountResponse'
          description: Successful data request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
              examples:
                userAccountNotFound:
                  value:
                    error: Account not found
                invalidToken:
                  value:
                    error: Invalid token
          description: Returns the errors specified
      security:
        -
          Bearer: []
      summary: Displays the users bank account details
  /sessions:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/postSessionsRequest'
        required: true
      tags:
        - sessions
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/postSessionsResponse'
              examples:
                tokenExample:
                  value:
                    token: 5f6dd64f5b5498060c54126a
          description: User is logged in and provided a token
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
              examples:
                invalidUsernameOrPassword:
                  value:
                    error: Invalid username or password
          description: Returns the errors specified
      summary: Logs the user in
    delete:
      tags:
        - sessions
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/successResponse'
              examples:
                tokenDeleted:
                  value:
                    message: Token successfully deleted
          description: Session deleted successfully
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
              examples:
                missingToken:
                  value:
                    error: Missing token
                invalidToken:
                  value:
                    error: Invalid token
                unknownUser:
                  value:
                    error: Unknown user
          description: Unauthorized
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
              examples:
                unsuccessfulDelete:
                  value:
                    error: Unsuccessful deletion
          description: Server error
      security:
        -
          Bearer: []
      summary: Logs the user out
  /transactions:
    get:
      tags:
        - transactions
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getTransactionsHistoryResponse'
              examples:
                transactionHistory:
                  value:
                    transactions:
                      -
                        createdAt: '2020-10-24T13:37:11.821Z'
                        status: completed
                        _id: 5f942e64bcc9ec2ff43a2b5b
                        userId: 5f9165c7ab97d33e5026a76d
                        amount: 10
                        currency: EUR
                        accountFrom: f6b764739703172167
                        accountTo: 24d238383569286925
                        explanation: joulu
                        senderName: Andrus
                        __v: 0
                        statusDetail: ''
          description: Responded with the transaction history
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
              examples:
                noTransactions:
                  value:
                    error: You have no logged transactions
          description: Returns the error specified
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
              examples:
                failedGettingTransactions:
                  value:
                    error: Failed getting transactions
          description: Server error
      security:
        -
          Bearer: []
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/postTransactionsRequest'
        required: true
      tags:
        - transactions
      responses:
        '201':
          description: Succesfully creates a transaction
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
              examples:
                accountFromNotFound:
                  value:
                    error: Account not found
                accountToNotFound:
                  value:
                    error: Invalid accountTo
                invalidAmount:
                  value:
                    error: Invalid amount
                insufficientFunds:
                  value:
                    error: Insufficient funds
                invalidUserAccount:
                  value:
                    error: Forbidden
          description: Returns the errors specified
      security:
        -
          Bearer: []
  /transactions/jwks:
    get:
      tags:
        - transactions
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getTransactionsJwksResponse'
              examples:
                keys:
                  value:
                    keys:
                      -
                        kty: RSA
                        kid: h_s_zbvPAS1WB-ref6FF1_TIHANcpjPhV_xEk9WR6X4
                        'n': >-
                          jdcp_0ewRa-dKQuqzSQD6nNsP8G-bfHcgl7fBshGCgznFYmGTiV2OuRQ1yIogdlfSBiQrol1P-IlfN1m5NKsR3iLw-PDOKFzoLf1fTQpuEZUsm5Ip-LpYgjCjjw8oOP7ZFqlkuR3XMj1rZYKiyhoRITxUZlz0v1LO1Wa736lO1E
                        e: AQAB
          description: Responds with a JWKS key
  /transactions/b2b:
    post:
      tags:
        - transactions
      responses:
        '200':
          description: Succesfully received transaction
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
              examples:
                parsingJwtFailed:
                  value:
                    error: Parsing JWT payload failed
                verifyAccountTo:
                  value:
                    error: Account not found
                bankNotFound:
                  value:
                    error: >-
                      The account sending the funds does not belong to a bank registered
                      in Central Bank
                cannotVerifyJwksSignature:
                  value:
                    error: 'Cannot verify your signature: The jwksUrl of your bank is invalid'
                invalidSignature:
                  value:
                    error: Invalid signature
          description: Returns the errors specified
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
              examples:
                centralBankError:
                  value:
                    error: Central Bank error
                missingJwksUrl:
                  value:
                    error: 'Cannot verify your signature: The jwksUrl of your bank is missing'
          description: Returns the errors specified
components:
  schemas:
    postUsersRequest:
      title: Root Type for postUsersRequest
      description: ''
      type: object
      properties:
        name:
          description: The name of the person registering their account
          type: string
        username:
          description: User account username
          type: string
        password:
          description: User account password
          type: string
      example:
        name: Testija
        username: tester123
        password: test
    errorResponse:
      title: Root Type for errorResponse
      description: Response body for all errors
      type: object
      properties:
        error:
          type: string
      example:
        error: Error description here
    postUsersResponse:
      title: Root Type for postUsersResponse
      description: ''
      type: object
    postSessionsRequest:
      title: Root Type for postSessionsRequest
      description: ''
      type: object
      properties:
        name:
          description: The name of the person trying to log in
          type: string
        username:
          description: User account username
          type: string
        password:
          description: User account password
          type: string
      example:
        name: Testija
        username: tester123
        password: test
    postSessionsResponse:
      title: Root Type for postSessionsResponse
      description: ''
      type: object
      properties:
        token:
          description: The token provided and used on login to handle a specific user
          type: string
      example:
        token: 5f6dd23b8818b63b2811afb4
    successResponse:
      title: Root Type for successResponse
      description: ''
      type: object
      properties:
        message:
          type: string
      example:
        message: Message description here
    getUsersAccountResponse:
      title: Root Type for postUsersAccountResponse
      description: ''
      type: object
      properties:
        account:
          description: Users account details
          type: object
          properties:
            account_number:
              type: string
            balance:
              type: string
            user:
              type: string
      example:
        name: Testija
        username: test123
        account:
          -
            account_number: 65b238383569286925
            balance: 9600
            currency: EUR
    postTransactionsRequest:
      title: Root Type for postTransactionsRequest
      description: ''
      type: object
      properties:
        accountFrom:
          description: Account number of the user sending funds
          type: string
        accountTo:
          description: Account number of the user receiving funds
          type: string
        amount:
          format: int32
          description: The amount (funds)
          type: integer
        explanation:
          description: The description of the transaction
          type: string
      example:
        accountFrom: 65b238383569286925
        accountTo: f6b952926464422664
        amount: 100
        explanation: test
    getTransactionsHistoryResponse:
      title: Root Type for getTransactionsHistory
      description: Get a users transaction history
      type: object
      properties:
        createdAt:
          description: When the transaction was created
          type: string
        status:
          description: The status of the transaction
          type: string
        _id:
          description: Transaction ID
          type: string
        userId:
          description: The id of the user sending the money (accountFrom)
          type: string
        amount:
          format: int32
          description: The amount being sent in cents
          type: integer
        currency:
          description: The currency of the sender
          type: string
        accountFrom:
          description: The account where the transaction is from
          type: string
        accountTo:
          description: The account where the transaction is to
          type: string
        explanation:
          description: The explanation of the transaction
          type: string
        senderName:
          description: The name of the sender (accountFrom)
          type: string
        __v:
          format: int32
          type: integer
        statusDetail:
          type: string
      example:
        createdAt: date
        status: the status
        _id: transaction id
        userId: user sending money
        amount: 0
        currency: the currency
        accountFrom: transaction from
        accountTo: transaction to
        explanation: explanation here
        senderName: sender's name
        __v: 0
        statusDetail: ''
    getTransactionsJwksResponse:
      title: Root Type for getTransactionsJWKS
      description: ''
      type: object
      properties:
        keys:
          description: key parameters provided by JWKS
          type: array
          items:
            type: object
            properties:
              kty:
                type: string
              kid:
                type: string
              'n':
                type: string
              e:
                type: string
      example:
        keys:
          -
            kty: some kty here
            kid: some kid here
            'n': some n here
            e: some e here
  securitySchemes:
    Bearer:
      scheme: bearer
      type: http
